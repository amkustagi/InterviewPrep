{
    "collab_server" : "",
    "contents" : "---\ntitle: \"1. Intro\"\noutput: html_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n```{r}\n?reserved\n```\n\n# Reserved words\n\nReserved words in R programming are a set of words that have special meaning and cannot be used as an identifier (variable name, function name etc.).\n\n\n1. Among these words, if, else, repeat, while, function, for, in, next and break are used for conditions, loops and user defined functions.\n\n2. TRUE and FALSE are the logical constants in R.\n\n3. NULL represents the absence of a value or an undefined value.\n\n\n# R Variables and Constants\n\nVariables are used to store data, whose value can be changed according to our need. Unique name given to variable (function and objects as well) is identifier.\n\n### Rules for writing Identifiers in R\n1. Identifiers can be a combination of letters, digits, period (.) and underscore (_).\n2. It must start with a letter or a period. If it starts with a period, it cannot be followed by a digit.\n3. Reserved words in R cannot be used as identifiers.\n\n### Valid identifiers in R\ntotal, Sum, .fine.with.dot, this_is_acceptable, Number5\n\n\n# Constants in R\nConstants, as the name suggests, are entities whose value cannot be altered. Basic types of constant are numeric constants and character constants.\n\n```{r}\ntypeof(5)\n# [1] \"double\"\n  \ntypeof(5L)\n# [1] \"integer\"\n\ntypeof(5i)\n# [1] \"complex\"\n\ntypeof(\"5\")\n#[1] \"character\"\n\nLETTERS\n\nletters\n\npi\n\nmonth.abb\n\nmonth.name\n```\n\n\n# R Operators\nArithmetic operators\nRelational operators\nLogical operators\nAssignment operators\n\n\n## R Arithmetic Operators\nThese operators are used to carry out mathematical operations like addition and multiplication. Here is a list of arithmetic operators available in R.\n\nOperator\tDescription\n+\tAddition\n-\tSubtraction\n*\tMultiplication\n/\tDivision\n^\tExponent\n%%\tModulus (Remainder from division)\n%/%\tInteger Division\n\n```{r}\nx <- 5\ny <- 16\n\nx+y\n\n\nx-y\n\n\nx*y\n\n\ny/x\n\n\ny%/%x\n\n\ny%%x\n\n\ny^x\n\n\n```\n\n\n## R Relational Operators\nRelational operators are used to compare between values. Here is a list of relational operators available in R.\n\nRelational Operators in R\nOperator\tDescription\n<\tLess than\n>\tGreater than\n<=\tLess than or equal to\n>=\tGreater than or equal to\n==\tEqual to\n!=\tNot equal to\n\n\n```{r}\nx <- 5\ny <- 16\n\nx<y\n\n\nx>y\n\n\nx<=5\n\n\ny>=20\n\n\ny == 16\n\n\nx != 5\n\n```\n\nOperation on Vectors\n\n```{r}\nx <- c(2,8,3)\ny <- c(6,4,1)\n\nx+y\n# [1]  8 12  4\n\nx>y\n# [1] FALSE  TRUE  TRUE\n\n\nx <- c(2,1,8,3)\ny <- c(9,4)\n\nx+y # Element of y is recycled to 9,4,9,4\n# [1] 11  5 17  7\n\nx-1 # Scalar 1 is recycled to 1,1,1,1\n# [1] 1 0 7 2\n\nx+c(1,2,3)\n# [1]  3  3 11  4\n\n# Warning message:\n# In x + c(1, 2, 3) :\n# longer object length is not a multiple of shorter object length\n\n\n\n```\n\n\n## R Logical Operators\nLogical operators are used to carry out Boolean operations like AND, OR etc.\n\nOperator\tDescription\n! \t  Logical NOT\n&\t    Element-wise logical AND\n&&\t  Logical AND\n|\t    Element-wise logical OR\n||\t  Logical OR\n\n```{r}\nx <- c(TRUE,FALSE,0,6)\ny <- c(FALSE,TRUE,FALSE,TRUE)\n\n!x\n# [1] FALSE  TRUE  TRUE FALSE\n\nx&y\n# [1] FALSE FALSE FALSE  TRUE\n\nx&&y\n# [1] FALSE\n\nx|y\n# [1]  TRUE  TRUE FALSE  TRUE\n\nx||y\n# [1] TRUE\n\n```\n\n# R Assignment Operators\n\n```{r}\nx <- 5\nx\n# [1] 5\n\nx = 9\nx\n# [1] 9\n\n10 -> x\nx\n# [1] 10\n```\n\n\n############################################\nControl Flows\n\nIf Syntax\nif (test_expression) {\n   statement\n}\n\n\n```{r}\nx <- 5\nif(x > 0){\n   print(\"Positive number\")\n}\n```\n\n\nif...else statement Syntax:\n\nif (test_expression) {\n   statement1\n} else {\n   statement2\n}\n\n\n```{r}\nx <- -5\nif(x > 0){\n   print(\"Non-negative number\")\n} else {\n   print(\"Negative number\")\n}\n\n\n\nif(x > 0) print(\"Non-negative number\") else print(\"Negative number\")\n\nx <- 5\ny <- if(x > 0) 5 else 6\ny\n```\n\n\nNested if...else statement\n\nif ( test_expression1) {\n   statement1\n} else if ( test_expression2) {\n   statement2\n} else if ( test_expression3) {\n   statement3\n} else\n   statement4\n   \n   \n```{r}\n\nx <- 0\nif (x < 0) {\n   print(\"Negative number\")\n} else if (x > 0) {\n   print(\"Positive number\")\n} else\n   print(\"Zero\")\n\n```\n\n\nSyntax of ifelse() function\n\nifelse(test_expression,x,y)\n\n```{r}\na = c(5,7,2,9)\nifelse(a %% 2 == 0,\"even\",\"odd\")\n# [1] \"odd\"  \"odd\"  \"even\" \"odd\" \n\n```\n\nR for Loop\n\nfor (val in sequence)\n{\n    statement\n}\n\n# No of Even numbers in the array\n```{r}\nx <- c(2,5,3,9,8,11,6)\ncount <- 0\nfor (val in x) {\n    if(val %% 2 == 0)  count = count+1\n}\nprint(count)\n```\n\n\nR while loop\n\nwhile (test_expression)\n{\n   statement\n}\n\n```{r}\ni <- 1\n\nwhile (i < 6) {\n   print(i)\n   i = i+1\n}\n```\n\n\nR break and next statement\n\n# break statement\nA break statement is used inside a loop (repeat, for, while) to stop the iterations and flow the control outside of the loop.\n```{r}\nx <- 1:5\n\nfor (val in x) {\n    if (val == 3){\n        break\n    }\n    print(val)\n}\n```\n\n# next statement\nA next statement is useful when we want to skip the current iteration of a loop without terminating it. On encountering next, the R parser skips further evaluation and starts next iteration of the loop.\n\n```{r}\nx <- 1:5\n\nfor (val in x) {\n    if (val == 3){\n        next\n    }\n    print(val)\n}\n```\n\n\n\nR Programming repeat loop: \nA repeat loop is used to iterate over a block of code multiple number of times. There is no condition check in repeat loop to exit the loop.\n\nrepeat {\n   statement\n}\n\n```{r}\nx <- 1\n\nrepeat {\n   print(x)\n   x = x+1\n   if (x == 6){\n       break\n   }\n}\n```\n\n######################################################\n# R Functions\n\nfunc_name <- function (argument) {\n   statement\n}\n\n```{r}\npow <- function(x, y) {\n   # function to print x raised to the power y\n\n   result <- x^y\n   print(paste(x,\"raised to the power\", y, \"is\", result))\n}\n\npow(8, 2)\n# [1] \"8 raised to the power 2 is 64\"\n\npow(2, 8)\n# [1] \"2 raised to the power 8 is 256\"\n\n\n```\n\nNamed Arguments\n\nWhen calling a function in this way, the order of the actual arguments doesn't matter. For example, all of the function calls given below are equivalent.\n\n```{r}\n\npow(8, 2)\n# [1] \"8 raised to the power 2 is 64\"\n\npow(x = 8, y = 2)\n# [1] \"8 raised to the power 2 is 64\"\n\npow(y = 2, x = 8)\n# [1] \"8 raised to the power 2 is 64\"\n\n```\n\n\n# named and unnamed arguments in a single call.\n\n```{r}\n\npow(x=8, 2)\n# [1] \"8 raised to the power 2 is 64\"\n\npow(2, x=8)\n# [1] \"8 raised to the power 2 is 64\"\n\n```\n\n\nDefault Values for Arguments\n\n```{r}\npow <- function(x, y = 2) {\n   # function to print x raised to the power y\n   result <- x^y\n   print(paste(x,\"raised to the power\", y, \"is\", result))\n}\n\n\npow(3)\n# [1] \"3 raised to the power 2 is 9\"\n\npow(3,1)\n# [1] \"3 raised to the power 1 is 3\"\n\n\n```\n\n\n# R Return Value from Function\n\nreturn(expression)\n\n```{r}\ncheck <- function(x) {\n   if (x > 0) {\n       result <- \"Positive\"\n   }\n   else if (x < 0) {\n       result <- \"Negative\"\n   }\n   else {\n       result <- \"Zero\"\n   }\n   return(result)\n}\n\ncheck(1)\n# [1] \"Positive\"\n\ncheck(-10)\n# [1] \"Negative\"\n\ncheck(0)\n# [1] \"Zero\"\n\n```\n\n\n### Functions without return()\nIf there are no explicit returns from a function, the value of the last evaluated expression is returned automatically in R.\n\n```{r}\ncheck <- function(x) {\n   if (x > 0) {\n       result <- \"Positive\"\n   }\n   else if (x < 0) {\n       result <- \"Negative\"\n   }\n   else {\n       result <- \"Zero\"\n   }\n   result\n}\n\n\n\ncheck(1)\n# [1] \"Positive\"\n\ncheck(-10)\n# [1] \"Negative\"\n\ncheck(0)\n# [1] \"Zero\"\n\n\n\n```\n\n\nWe generally use explicit return() functions to return a value immediately from a function. If it is not the last statement of the function, it will prematurely end the function bringing the control to the place from which it was called.\n\n```{r}\ncheck <- function(x) {\n   if (x>0) {\n       return(\"Positive\")\n   }\n   else if (x<0) {\n       return(\"Negative\")\n   }\n   else {\n       return(\"Zero\")\n   }\n}\n```\n\n\n\n### Multiple Returns\nThe return() function can return only a single object. If we want to return multiple values in R, we can use a list (or other objects) and return it.\n\n```{r}\nmulti_return <- function() {\n   my_list <- list(\"color\" = \"red\", \"size\" = 20, \"shape\" = \"round\")\n   return(my_list) \n}\n\na <- multi_return()\na$color\n# [1] \"red\"\n\na$size\n# [1] 20\n\na$shape\n# [1] \"round\"\n\n```\n\n\n\n# R Environment and Scope\n\n\nR Programming Environment\n1. Environment can be thought of as a collection of objects (functions, variables etc.).\n\n2. Global environment can be referred to as .GlobalEnv in R codes as well.\n\n3. We can use the ls() function to show what variables and functions are defined in the current environment.\n\n\n```{r}\na <- 2\nb <- 5\nf <- function(x) x<-0\n\nls()\n# [1] \"a\" \"b\" \"f\"\n\nenvironment()\n# <environment: R_GlobalEnv>\n\n.GlobalEnv\n# <environment: R_GlobalEnv>\n\n```\n\n\n# Cascading of environments\n\n```{r}\nf <- function(f_x){\n   g <- function(g_x){\n       print(\"Inside g\")\n       print(environment())\n       print(ls())\n   }\n   g(5)\n   print(\"Inside f\")\n   print(environment())\n   print(ls())\n}\n\n```\n\n```{r}\nf(6)\n\n#[1] \"Inside g\"\n# <environment: 0x0000000010c2bdc8>\n# [1] \"g_x\"\n# [1] \"Inside f\"\n# <environment: 0x0000000010c2a870>\n# [1] \"f_x\" \"g\"  \n\nenvironment()\n# <environment: R_GlobalEnv>\n\nls()\n\n```\n\n\n\nR Programming Scope\n\n### Global variables\n\nGlobal variables are those variables which exists throughout the execution of a program. It can be changed and accessed from any part of the program.\n\n\nHowever, global variables also depend upon the perspective of a function.\nFor example, in the above example, from the perspective of inner_func(), both a and b are global variables.\n\n\n```{r}\n\nouter_func <- function(){\n   a <- 20\n   inner_func <- function(){\n       a <- 30\n       print(a)\n   }\n   inner_func()\n   print(a)\n}\n\n```\n\nLocal variables\nOn the other hand, Local variables are those variables which exist only within a certain part of a program like a function, and is released when the function call ends.\n\nIn the above program the variable c is called a local variable.\nIf we assign a value to a variable with the function inner_func(), the change will only be local and cannot be accessed outside the function.\n\n```{r}\na <- 10\n\nouter_func()\n# [1] 30\n# [1] 20\n\nprint(a)\n# [1] 10\n\n\n```\n\n\nR Recursive Function\n\n```{r}\n# Recursive function to find factorial\n\nrecursive.factorial <- function(x) {\n   if (x == 0)    return (1)\n   else           return (x * recursive.factorial(x-1))\n}\n\n\n\nrecursive.factorial(0)\n#[1] 1\n\nrecursive.factorial(5)\n#[1] 120\n\nrecursive.factorial(7)\n#[1] 5040\n\n\n```\n\n\nR Infix Operator\n\nInfix operators, used between the operands. Actually, these operators do a function call in the background.\nFor example, the expression a+b is actually calling the function `+`() with the arguments a and b, as `+`(a, b).\n\n\n\nPredefined infix operators in R\n%%\tRemainder operator\n%/%\tInteger division\n%*%\tMatrix multiplication\n%o%\tOuter product\n%x%\tKronecker product\n%in%\tMatching operator\n\n\n\n```{r}\n5+3\n#[1] 8\n\n`+`(5,3)\n#[1] 8\n\n5-3\n#[1] 2\n\n`-`(5,3)\n#[1] 2\n\n5*3-1\n#[1] 14\n\n`-`(`*`(5,3),1)\n#[1] 14\n\n```\n\n\n# User defined Inflix operator ( Function)\n\nIt is possible to create user-defined infix operators in R. This is done by naming a function that starts and ends with %. Following is an example of user-defined infix operator to see if a number is exactly divisible by another.\n\n```{r}\n`%divisible%` <- function(x,y)\n{\n   if (x%%y ==0) return (TRUE)\n   else          return (FALSE)\n}\n\n\n10 %divisible% 3\n#[1] FALSE\n\n10 %divisible% 2\n#[1] TRUE\n\n`%divisible%`(10,5)\n#[1] TRUE\n\n```\n\n\n\nR switch()\n\nLike the switch statements in other languages, R has a similar construct in the form of switch() function.\n\n\n```{r}\nswitch(2,\"red\",\"green\",\"blue\")\n#[1] \"green\"\n\ny <- switch(1,\"red\",\"green\",\"blue\")\ny\n#[1] \"red\"\n\n\n# If the numeric value is out of range (greater than the number of items in the list or smaller than 1), then, NULL is returned.\n\nx <- switch(0,\"red\",\"green\",\"blue\")\nx\n\ny <- switch(4,\"red\",\"green\",\"blue\")\ny\n\n\n\nswitch(\"color\", \"color\" = \"red\", \"shape\" = \"square\", \"length\" = 5)\n#[1] \"red\"\n\nswitch(\"length\", \"color\" = \"red\", \"shape\" = \"square\", \"length\" = 5)\n#[1] 5\n\n```\n\n\n\nPROGRAM: SIMPLE CALCULATOR\n\n\n```{r}\n# Program make a simple calculator\n# that can add, subtract, multiply\n# and divide using functions\n\nadd <- function(x, y) {\n    return(x + y)\n}\n\nsubtract <- function(x, y) {\n    return(x - y)\n}\n\nmultiply <- function(x, y) {\n    return(x * y)\n}\n\ndivide <- function(x, y) {\n    return(x / y)\n}\n\n# take input from the user\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\n\nchoice = as.integer(readline(prompt=\"Enter choice[1/2/3/4]: \"))\n\nnum1 = as.integer(readline(prompt=\"Enter first number: \"))\nnum2 = as.integer(readline(prompt=\"Enter second number: \"))\n\noperator <- switch(choice,\"+\",\"-\",\"*\",\"/\")\nresult <- switch(choice, add(num1, num2), subtract(num1, num2), multiply(num1, num2), divide(num1, num2))\n\nprint(paste(num1, operator, num2, \"=\", result))\n\n\n```\n\n\nVector Programmming:\n```{r}\nx <- c(1, 5, 4, 9, 0)\ntypeof(x)\n# [1] \"double\"\nlength(x)\n# [1] 5\n\nx <- c(1, 5.4, TRUE, \"hello\")\nx\n# [1] \"1\"     \"5.4\"   \"TRUE\"  \"hello\"\ntypeof(x)\n# [1] \"character\"\n```\n\n\nCreating a vector using : operator\n\n```{r}\nx <- 1:7; x\n# [1] 1 2 3 4 5 6 7\n\ny <- 2:-2; y\n#[1]  2  1  0 -1 -2\n```\n\nCreating a vector using seq() function\n```{r}\nseq(1, 3, by=0.2)          # specify step size\n# [1] 1.0 1.2 1.4 1.6 1.8 2.0 2.2 2.4 2.6 2.8 3.0\n\nseq(1, 5, length.out=4)    # specify length of the vector\n# [1] 1.000000 2.333333 3.666667 5.000000\n```\n\n\nHow to access Elements of a Vector?\n\n```{r}\nx <- c(0,2,4,6,8,10)\n# [1]  0  2  4  6  8 10\n\nx[3]           # access 3rd element\n# [1] 4\n\nx[c(2, 4)]     # access 2nd and 4th element\n# [1] 2 6\n\nx[-3]          # access all but 3rd element\n#[1]  0  2  6  8 10\n\nx[c(2, -4)]    # cannot mix positive and negative integers\n# Error in x[c(2, -4)] : only 0's may be mixed with negative subscripts\n\nx[c(2.4, 3.54)]    # real numbers are truncated to integers\n#[1] 2 4\n```\n\nUsing logical vector as index\n```{r}\nx[c(TRUE, FALSE, FALSE, TRUE)]\n# [1] -3  3\n\nx[x <= 0]  # filtering vectors based on conditions\n# [1] -3 -1\n\nx[x > 0]\n#[1] 3\n```\n\n\nUsing character vector as index\n```{r}\nx <- c(\"first\"=3, \"second\"=0, \"third\"=9)\nnames(x)\n# [1] \"first\"  \"second\" \"third\" \n\nx[\"second\"]\nsecond \n    0 \n\nx[c(\"first\", \"third\")]\n# first third \n#   3     9\n```\n\n\n\nHow to modify a vector in R?\n```{r}\nx <- c(-3, -2, -1,  0,  1,  2); x\n# [1] -3 -2 -1  0  1  2\n\nx[2] <- 0; x        # modify 2nd element\n# [1] -3  0 -1  0  1  2\n\nx[x<0] <- 5; x   # modify elements less than 0\n# [1] 5 0 5 0 1 2\n\nx <- x[1:4]; x      # truncate x to first 4 elements\n# [1] 5 0 5 0\n```\n\n\nHow to delete a Vector?\n```{r}\nx\n# [1] -3 -2 -1  0  1  2\n\nx <- NULL ; x\n# NULL\n\nx[4]\n# NULL\n```\n\n\nExample: Add Two Vectors\n\n```{r}\nx <- c(3,6,8); x\n# [1] 3 6 8\ny <- c(2,9,0); y\n#[1] 2 9 0\n\nx + y\n# [1]  5 15  8\n\nx + 1    # 1 is recycled to (1,1,1)\n# [1] 4 7 9\n\nx + c(1,4)    # (1,4) is recycled to (1,4,1) but warning issued\n# [1]  4 10  9\n# Warning message:\n# In x + c(1, 4) :\n#  longer object length is not a multiple of shorter object length\n\n```\n\n\nExample: Vector Elements Arithmetic & Ignore NA\n```{r}\nsum(2,7,5)\n# [1] 14\n\nx <- c(2,NA, 3, 1 ,4); x\n# [1]  2 NA  3  1  4\n\nsum(x)    # if any element is NA or NaN, result is NA or NaN\n# [1] NA\n\nsum(x, na.rm=TRUE)    # this way we can ignore NA and NaN values\n# [1] 10\n\nmean(x, na.rm=TRUE)\n# [1] 2.5\n\nprod(x, na.rm=TRUE)\n# [1] 24\n```\n\nExample: Sort a Vector\n```{r}\nx <- c(7,1,8,3,6,5,2,2,4)\n# [1] 7 1 8 3 2 6 5 2 2 4\n\n# sort in ascending order\nsort(x)\n#[1] 1 2 2 2 3 4 5 6 7 8\n\n# sort in descending order\nsort(x, decreasing=TRUE)\n# [1] 8 7 6 5 4 3 2 2 2 1\n\n# vector x remains unaffected\nx\n#[1] 7 1 8 3 2 6 5 2 2 4\n\n?order\norder(x)\n# [1]  2  5  8  9  4 10  7  6  1  3\n\norder(x, decreasing=TRUE)\n# [1]  3  1  6  7 10  4  5  8  9  2\nx[order(x)]    # this will also sort x\n# [1] 1 2 2 2 3 4 5 6 7 8\n\n\n```\n\n\n# R Matrix\n\n\nMatrix is a two dimensional data structure in R programming.\n\nMatrix is similar to vectors but additionally contains the dimension attribute. All attributes of an object can be checked with the attributes() function (dimension can be checked directly with the dim() function).\n\nWe can check if a variable is a matrix or not with the class() function.\n\n\n```{r}\na <- matrix(1:9, nrow = 3, ncol = 3) ;a\n#     [,1] [,2] [,3]\n# [1,]    1    4    7\n# [2,]    2    5    8\n# [3,]    3    6    9\n\n# class(a)\n# [1] \"matrix\"\n\nattributes(a)\n# $dim\n# [1] 3 3\n\ndim(a)\n# [1] 3 3\n\n\n# same result is obtained by providing only one dimension\nmatrix(1:9, nrow = 3, byrow=TRUE)  # fill matrix row-wise\n#     [,1] [,2] [,3]\n# [1,]    1    4    7\n# [2,]    2    5    8\n# [3,]    3    6    9\n\n\n\nx <- matrix(1:9, nrow = 3, dimnames = list(c(\"X\",\"Y\",\"Z\"), c(\"A\",\"B\",\"C\")))\nx\n#  A B C\n# X 1 4 7\n# Y 2 5 8\n# Z 3 6 9\n\ncolnames(x)\n# [1] \"A\" \"B\" \"C\"\nrownames(x)\n# [1] \"X\" \"Y\" \"Z\"\n\n# It is also possible to change names\ncolnames(x) <- c(\"C1\",\"C2\",\"C3\")\nrownames(x) <- c(\"R1\",\"R2\",\"R3\")\n\nx\n#   C1 C2 C3\n# R1  1  4  7\n# R2  2  5  8\n# R3  3  6  9\n\n\n```\n\nAnother way of creating a matrix is by using functions cbind() and rbind() as in column bind and row bind.\n\n```{r}\ncbind(c(1,2,3),c(4,5,6))\n#     [,1] [,2]\n# [1,]    1    4\n# [2,]    2    5\n# [3,]    3    6\n\nrbind(c(1,2,3),c(4,5,6))\n#     [,1] [,2] [,3]\n# [1,]    1    2    3\n# [2,]    4    5    6\n```\n\n# create a matrix from a vector by setting its dimension using dim()\n\n```{r}\nx <- c(1,2,3,4,5,6)\nx\n# [1] 1 2 3 4 5 6\n\nclass(x)\n# [1] \"numeric\"\n\ndim(x) <- c(2,3)\nx\n#     [,1] [,2] [,3]\n# [1,]    1    3    5\n# [2,]    2    4    6\n\nclass(x)\n# [1] \"matrix\"\n\n```\n\n\n# How to access Elements of a matrix?\nWe can access elements of a matrix using the square bracket [ indexing method. Elements can be accessed as var[row, column]. Here rows and columns are vectors.\n\n```{r}\nx <- c(1:9)\ndim(x) <- c(3,3);x\n\n#     [,1] [,2] [,3]\n# [1,]    1    4    7\n# [2,]    2    5    8\n# [3,]    3    6    9\n\nx[c(1,2),c(2,3)]    # select rows 1 & 2 and columns 2 & 3\n#     [,1] [,2]\n# [1,]    4    7\n# [2,]    5    8\n\nx[c(3,2),]    # leaving column field blank will select entire columns\n\n#     [,1] [,2] [,3]\n# [1,]    3    6    9\n# [2,]    2    5    8\n\nx[,]    # leaving row as well as column field blank will select entire matrix\n#     [,1] [,2] [,3]\n# [1,]    1    4    7\n# [2,]    2    5    8\n# [3,]    3    6    9\n\nx[-1,]    # select all rows except first\n\n#     [,1] [,2] [,3]\n# [1,]    2    5    8\n# [2,]    3    6    9\n\nx[,-2]    # select all column except 2nd\n\n\n```\n\nOne thing to notice here is that, if the matrix returned after indexing is a row matrix or column matrix, the result is given as a vector.\n\n```{r}\nx[1,]\n# [1] 1 4 7\nclass(x[1,])\n# [1] \"integer\"\n\n\nx[1,, drop=FALSE]\n# [1] 1 4 7\nclass(x[1,, drop=FALSE])\n# [1] \"integer\"\n\n```\n\n\nIndex a matrix with a single vector.\n\n```{r}\nx <- cbind(c(4,6,1),c(8,0,2),c(3,7,9)); x\n\n#     [,1] [,2] [,3]\n# [1,]    4    8    3\n# [2,]    6    0    7\n# [3,]    1    2    9\n\nx[1:4]\n# [1] 4 6 1 8\n\nx[c(3,5,7)]\n# [1] 1 0 3\n\n\nx[c(TRUE, FALSE)]\n\nx[x>5]    # select elements greater than 5\n# [1] 6 8 7 9\n\nx[x%%2 == 0]    # select even elements\n# [1] 4 6 8 0 2\n\n```\n\n\n```{r}\nx <- cbind(c(4,6,1),c(8,0,2),c(3,7,9)); x\n\n\ncolnames(x) <- c(\"A\",\"B\",\"C\")\nrownames(x) <- c(\"R1\",\"R2\",\"R3\")\n\nx\n\n\nx[,\"A\"]\n# [1] 4 6 1\n\nx[TRUE,c(\"A\",\"C\")]\n#     A C\n# [1,] 4 3\n# [2,] 6 7\n# [3,] 1 9\n\nx[2:3,c(\"A\",\"C\")]\n#     A C\n# [1,] 6 7\n# [2,] 1 9\n    \n    \n```\n\n\nHow to modify a matrix in R?\n\n```{r}\nx <- c(1:9); dim(x) <- c(3,3); x\n\n\n#     [,1] [,2] [,3]\n# [1,]    1    4    7\n# [2,]    2    5    8\n# [3,]    3    6    9\n\nx[2,2] <- 10; x    # modify a single element\n\n#     [,1] [,2] [,3]\n# [1,]    1    4    7\n# [2,]    2   10    8\n# [3,]    3    6    9\n\n\nx[x<5] <- 0; x    # modify elements less than 5\n\n#     [,1] [,2] [,3]\n# [1,]    0    0    7\n# [2,]    0   10    8\n# [3,]    0    6    9\n\n```\n\n# transpose a matrix\n```{r}\nt(x)    # transpose a matrix\n\n#     [,1] [,2] [,3]\n# [1,]    0    0    0\n# [2,]    0   10    6\n# [3,]    7    8    9\n\n```\n\n\nWe can add row or column using rbind() and cbind() function respectively. Similarly, it can be removed through reassignment.\n\n```{r}\ncbind(x, c(1, 2, 3))    # add column\n#     [,1] [,2] [,3] [,4]\n# [1,]    0    0    7    1\n# [2,]    0   10    8    2\n# [3,]    0    6    9    3\n\n\nrbind(x,c(1,2,3))    # add row\n\n#     [,1] [,2] [,3]\n# [1,]    0    0    7\n# [2,]    0   10    8\n# [3,]    0    6    9\n# [4,]    1    2    3\n\nx <- x[1:2,]; x    # remove last row\n\n#     [,1] [,2] [,3]\n# [1,]    0    0    7\n# [2,]    0   10    8\n\n```\n\n\n\n\n```{r}\nx <- c(1:6); dim(x) <- c(2,3) ; x\n#     [,1] [,2] [,3]\n# [1,]    1    3    5\n# [2,]    2    4    6\n\ndim(x) <- c(3,2); x    # change to 3X2 matrix\n#     [,1] [,2]\n# [1,]    1    4\n# [2,]    2    5\n# [3,]    3    6\n\ndim(x) <- c(1,6); x    # change to 1X6 matrix\n#     [,1] [,2] [,3] [,4] [,5] [,6]\n# [1,]    1    2    3    4    5    6\n\n```\n\n\n\n\nR Lists\n\nList is a data structure having components of mixed data types.\n\nA vector having all elements of the same type is called atomic vector but a vector having elements of different type is called list.\n\n```{r}\nx <- list(\"a\" = 2.5, \"b\" = TRUE, \"c\" = 1:3)\n\nx <- list(\"a\"= 2.5, \"b\"=TRUE, \"c\"= c(1,2,3)); x\n# $a\n# [1] 2.5\n# \n# $b\n# [1] TRUE\n# \n# $c\n# [1] 1 2 3\n\ntypeof(x)\n# [1] \"list\"\n\nlength(x)\n# [1] 3\n\n\nstr(x)\n# List of 3\n# $ a: num 2.5\n# $ b: logi TRUE\n# $ c: int [1:3] 1 2 3\n\n\n\n# However, tags are optional. We can create the same list without the tags as follows. In such scenario, numeric indices are used by default.\n\nx <- list(2.5,TRUE,1:3); x\n\n# [[1]]\n# [1] 2.5\n# \n# [[2]]\n# [1] TRUE\n# \n# [[3]]\n# [1] 1 2 3\n\ntypeof(x)\nstr(x)\n```\n\n\n\n```{r}\nx <- list(\"Name\"=\"John\",\"age\"= 19,\"Speaks\" = c(\"English\",\"French\")); x\n\n\nx\n# $name\n# [1] \"John\"\n# \n# $age\n# [1] 19\n# \n# $speaks\n# [1] \"English\" \"French\" \n\nx[c(1:2)]    # index using integer vector\n\n# $name\n# [1] \"John\"\n# \n# $age\n# [1] 19\n\nx[-2]        # using negative integer to exclude second component\n\n# $name\n# [1] \"John\"\n# \n# $speaks\n# [1] \"English\" \"French\" \n\nx[c(T,F,F)]  # index using logical vector\n\n# $name\n# [1] \"John\"\n\nx[c(\"age\",\"speaks\")]    # index using character vector\n\n# $age\n# [1] 19\n# \n# $speaks\n# [1] \"English\" \"French\" \n\n\n```\n\nHowever, this approach will allow us to access only a single component at a time.\n\n```{r}\n\nx[\"age\"]\n# $age\n# [1] 19\n\ntypeof(x[\"age\"])    # single [ returns a list\n# [1] \"list\"\n\n\nx[[\"age\"]]    # double [[ returns the content\n# [1] 19\n\ntypeof(x[[\"age\"]])\n# [1] \"double\"\n\n```\n\nIndexing the list\n\n```{r}\nx\nx$Name    # same as x[[\"name\"]]\n# [1] \"John\"\n\nx$a                  # partial matching, same as x$ag or x$age\n# [1] 19\n\nx[[\"a\"]]             # cannot do partial match with [[\n# NULL\n\n# indexing can be done recursively\nx$speaks[1]\n# [1] \"English\"\n\nx[[\"speaks\"]][2]\n# [1] \"French\"\n\n```\n\n\nHow to modify a list in R?\n\n```{r}\nx[[\"name\"]] <- \"Clair\"; x\n\n# $age\n# [1] 19\n# \n# $speaks\n# [1] \"English\" \"French\" \n# \n# $name\n# [1] \"Clair\"\n\n```\n\nHow to add components to a list?\n\n```{r}\nx[[\"married\"]] <- FALSE\nx[[\"Flirt\"]] <- \"Yeahh!!\"\nx\n\n# $age\n# [1] 19\n# \n# $speaks\n# [1] \"English\" \"French\" \n# \n# $name\n# [1] \"Clair\"\n# \n# $married\n# [1] FALSE\n```\n\n```{r}\nx[[\"age\"]] <- NULL\nstr(x)\n\n# List of 3\n# $ speaks : chr [1:2] \"English\" \"French\"\n# $ name   : chr \"Clair\"\n# $ married: logi FALSE\n\n\nx$married <- NULL\nstr(x)\n\n# List of 2\n# $ speaks: chr [1:2] \"English\" \"French\"\n# $ name  : chr \"Clair\"\n\n```\n\n\nDATA FRAMES\n\n```{r}\nx <- data.frame(\"SN\" = 1:2, \"AGE\" = c(21, 15)); x\n\n#   SN AGE\n# 1  1  21\n# 2  2  15\n\ntypeof(x)     # data frame is a special case of  list\n# [1] \"list\" \n\nclass(x)\n# [1] \"data.frame\"\n\n```\n\nFunctions of data frame\n\n```{r}\nx <- data.frame(\"SN\" = 1:2, \"AGE\" = c(21, 15),\"Name\" = c(\"Baby\", \"AD\")); x\n\nnames(x)\n# [1] \"SN\"   \"Age\"  \"Name\"\n\nncol(x)\n# [1] 3\n\nnrow(x)\n# [1] 2\n\nlength(x)    # returns length of the list, same as ncol()\n# [1] 3\n\nstr(x)\n\n# 'data.frame':\t2 obs. of  3 variables:\n#  $ SN  : int  1 2\n#  $ AGE : num  21 15\n#  $ Name: Factor w/ 2 levels \"AD\",\"Baby\": 2 1\n```\n\nHow to access Components of a Data Frame?\n```{r}\nx[\"Name\"]\n#  Name\n# 1 John\n# 2 Dora\n\nx$Name\n# [1] \"John\" \"Dora\"\n\nx[[\"Name\"]]\n# [1] \"John\" \"Dora\"\n\nx[[3]]\n# [1] \"John\" \"Dora\"\n```\n\n\nAccessing like a matrix\nData frames can be accessed like a matrix by providing index for row and column.\n\nTo illustrate this, we use datasets already available in R. Datasets that are available can be listed with the command library(help = \"datasets\").\n```{r}\ntrees\n\nstr(trees)\n# 'data.frame':   31 obs. of 3 variables:\n# $ Girth : num  8.3 8.6 8.8 10.5 10.7 10.8 11 11 11.1 11.2 ...\n# $ Height: num  70 65 63 72 81 83 66 75 80 75 ...\n# $ Volume: num  10.3 10.3 10.2 16.4 18.8 19.7 15.6 18.2 22.6 19.9 ...\n\nhead(trees,n=3)\n\n#  Girth Height Volume\n# 1   8.3     70   10.3\n# 2   8.6     65   10.3\n# 3   8.8     63   10.2\n\n```\n\nAccess the data frame like a matrix.\n```{r}\n\ntrees[2:3,]    # select 2nd and 3rd row\n#  Girth Height Volume\n# 2   8.6     65   10.3\n# 3   8.8     63   10.2\n\ntrees[trees$Height > 82,]    # selects rows with Height greater than 82\n\n#   Girth Height Volume\n# 6   10.8     83   19.7\n# 17  12.9     85   33.8\n# 18  13.3     86   27.4\n# 31  20.6     87   77.0\n\ntrees[10:12,2]\n# [1] 75 79 76\n\ntrees[10:12,2, drop = FALSE] # tabel structure will remain intact\n\n#   Height\n# 10     75\n# 11     79\n# 12     76\n```\n\nHow to modify a Data Frame in R?\n```{r}\nx\n#  SN Age Name\n# 1  1  21 John\n# 2  2  15 Dora\n\nx[1,\"AGE\"] <- 20; x\nx <- x[,-4] ; x\n\n# SN Age Name\n# 1  1  20 John\n# 2  2  15 Dora\n```\n\n\n\n```{r}\nrbind(x,list(1,16,\"Paul\"))\n\n#  SN Age Name\n# 1  1  20 John\n# 2  2  15 Dora\n# 3  1  16 Paul\n\n\ncbind(x,State=c(\"NY\",\"FL\"))\n#  SN Age Name State\n# 1  1  20 John    NY\n# 2  2  15 Dora    FL\n\n\n```\n\n\nDeleting Component\n```{r}\nx$State <- NULL\nx\n#  SN Age Name\n# 1  1  20 John\n# 2  2  15 Dora\n\n```\n\nDeleting through reassignments.\n```{r}\nx <- x[-1,]; x\n\n#  SN Age Name\n# 2  2  15 Dora\n```\n\n\n# R Factors\n\n```{r}\nnumber <- factor(c(\"positive\",\"negative\",\"zero\",\"positive\",\"negative\"))\n\nnumber  \n# [1] positive negative zero     positive negative\n# Levels: negative positive zero\n\nclass(number)\n# [1] \"factor\"\nlevels(number)\n# [1] \"negative\" \"positive\" \"zero\" \n\n```\n\nHow to create a factor in R?\nWe can create a factor using the function factor(). Levels of a factor are inferred from the data if not provided.\n\n```{r}\nx <- factor(c(\"single\", \"married\", \"married\", \"single\")); x\n\n# [1] single  married married single\n# Levels: married single\n\nx <- factor(c(\"single\", \"married\", \"married\", \"single\"), levels = c(\"single\", \"married\", \"divorced\")); x\n\n# [1] single  married married single\n# Levels: single married divorced\n\nstr(x)\n# Factor w/ 3 levels \"single\",\"married\",..: 1 2 2 1\n```\n\n\nHow to access compoments of a factor?\nAccessing components of a factor is very much similar to that of vectors.\n\n```{r}\nx\n# [1] single  married married single\n# Levels: married single\n\nx[3]           # access 3rd element\n# [1] married\n# Levels: married single\n\nx[c(2, 4)]     # access 2nd and 4th element\n# [1] married single\n# Levels: married single\n\nx[-1]          # access all but 1st element\n# [1] married married single\n# Levels: married single\n\nx[c(TRUE, FALSE, FALSE, TRUE)]  # using logical vector\n# [1] single single\n# Levels: married single\n\n```\n\nHow to modify a factor?\nComponents of a factor can be modified using simple assignments. However, we cannot choose values outside of its predefined levels.\n\n```{r}\nx\n# [1] single  married married single\n# Levels: single married divorced\n\nx[2] <- \"divorced\"    # modify second element;  x\n# [1] single   divorced married  single  \n# Levels: single married divorced\n\nx[3] <- \"widowed\"    # cannot assign values outside levels\n\n# Warning message:\n# In `[<-.factor`(`*tmp*`, 3, value = \"widowed\") :\n#  invalid factor level, NA generated\n\nx\n# [1] single   divorced <NA>     single  \n# Levels: single married divorced\n\n\nlevels(x) <- c(levels(x), \"widowed\")    # add new level\n\nx[3] <- \"widowed\"\n\nx\n# [1] single   divorced widowed  single  \n# Levels: single married divorced widowed\n\n```\n\n",
    "created" : 1491524822784.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1002673507",
    "id" : "6615156C",
    "lastKnownWriteTime" : 1491598626,
    "last_content_update" : 1491598626473,
    "path" : "C:/Users/avina/Desktop/Prep/RangTech/R Prep/RBasics/1. Intro.Rmd",
    "project_path" : "1. Intro.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}